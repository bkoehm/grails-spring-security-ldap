buildscript {
	ext {
		grailsVersion = project.grailsVersion
	}
	repositories {
		mavenCentral()
		maven { url 'https://repo.grails.org/grails/core' }
		gradlePluginPortal()
	}
	dependencies {
		classpath "org.grails:grails-gradle-plugin:$grailsVersion"
		classpath "org.asciidoctor:asciidoctor-gradle-jvm:4.0.3"
		classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
	}
}

plugins {
	id 'io.spring.dependency-management' version '1.1.6'
	id 'maven-publish'
	id 'groovy'
	id 'java-library'
	id 'signing'
}

version = projectVersion
group 'org.grails.plugins'

ext {
	grailsVersion = project.grailsVersion
	isSnapshot = project.projectVersion.endsWith('-SNAPSHOT')
	isReleaseVersion = !isSnapshot
}

apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.asciidoctor.jvm.convert'

if (isReleaseVersion) {
	apply plugin: 'io.github.gradle-nexus.publish-plugin'

	nexusPublishing {
		repositories {
			sonatype {
				def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
				def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
				def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
				nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
				username = ossUser
				password = ossPass
				stagingProfileId = ossStagingProfileId
			}
		}
	}
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'https://repo.grails.org/grails/core' }
}

subprojects {
    configurations {
        all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details->
                if (details.requested.group == 'org.seleniumhq.selenium') {
                    details.useVersion(seleniumVersion)
                }
            }
        }
    }
}

dependencies {
	runtimeOnly 'org.grails:grails-web-boot'

	api "org.grails.plugins:spring-security-core:$grailsSpringSecurityCoreVersion"

	api "org.springframework.security:spring-security-ldap:$springSecurityVersion", {
		['apacheds-core', 'apacheds-core-entry', 'apacheds-protocol-ldap', 'apacheds-protocol-shared',
		 'apacheds-server-jndi', 'commons-logging', 'fest-assert', 'jcl-over-slf4j', 'junit',
		 'ldapsdk', 'logback-classic', 'mockito-core', 'shared-ldap', 'slf4j-api', 'spring-beans',
		 'spring-context', 'spring-core', 'spring-ldap-core', 'spring-security-core',
		 'spring-test', 'spring-tx'].each { exclude module: it }
	}

	api "org.springframework.ldap:spring-ldap-core:$springLdapCoreVersion", {
		['commons-lang', 'gsbase', 'junit', 'mockito-core', 'powermock-api-mockito',
		 'powermock-api-support', 'powermock-core', 'powermock-module-junit4',
		 'powermock-module-junit4-common', 'powermock-reflect', 'slf4j-log4j12', 'spring-beans',
		 'spring-core', 'spring-data-commons', 'spring-test', 'spring-tx'].each { exclude module: it }
	}

	console 'org.grails:grails-console'
	testImplementation "org.grails:grails-web-testing-support"
}

apply from: "${rootProject.projectDir}/gradle/testVerbose.gradle"

asciidoctor {
	sources {
		include 'index.adoc'
	}
	outputDir file('build/docs')
	attributes 'source-highlighter': 'prettify',
	            icons:               'font',
	            setanchors:          'true',
	            idprefix:            '',
	            idseparator:         '-',
	            toc2:                '',
	            numbered:            '',
	            revnumber:           project.version
}

task docs(dependsOn: asciidoctor)  {
	group 'documentation'
	doLast() {
		File dir = file('build/docs')
		file('build/docs/ghpages.html') << file('src/docs/asciidoc/index.tmpl').text.replaceAll('@VERSION@', project.version)
	}
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : "${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg"
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext.pomInfo = {
	delegate.name "Grails Spring Security LDAP Plugin"
	delegate.description project.projectDesc
	delegate.url project.hasProperty('websiteUrl') ? project.websiteUrl : "http://grails-plugins.github.io/grails-spring-security-ldap/"

	delegate.licenses {
		delegate.license {
			delegate.name 'The Apache Software License, Version 2.0'
			delegate.url 'https://www.apache.org/licenses/LICENSE-2.0.txt'
			delegate.distribution 'repo'
		}
	}

	delegate.scm {
		delegate.url project.hasProperty('vcsUrl') ? project.vcsUrl : "https://github.com/grails-plugins/grails-spring-security-ldap"
		delegate.connection "scm:git@github.com:${githubSlug}.git"
		delegate.developerConnection "scm:git@github.com:${githubSlug}.git"
	}

	delegate.issueManagement {
		delegate.url project.issueTrackerUrl
		delegate.system 'GitHub'
	}

	if (developers) {
		delegate.developers {
			for (dev in developers.split(',')) {
				delegate.developer {
					delegate.id dev.toLowerCase().replace(' ', '')
					delegate.name dev
				}
			}
		}
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId = project.group
			artifactId = project.name
			version = project.version

			from components.java

			artifact sourcesJar
			artifact javadocJar
			artifact source: "${buildDir}/classes/groovy/main/META-INF/grails-plugin.xml",
					classifier: "plugin",
					extension: 'xml'

			pom.withXml {
				def xml = asNode()

				xml.children().last() + pomInfo
				// dependency management shouldn't be included
				def n = xml.get("dependencyManagement")
				if (n)
					xml.remove(n)
			}
		}
	}
}

signing {
	sign publishing.publications.maven
}

tasks.withType(Sign) {
	onlyIf { isReleaseVersion }
}
